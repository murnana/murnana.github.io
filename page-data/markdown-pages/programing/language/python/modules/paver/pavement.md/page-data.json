{"componentChunkName":"component---src-templates-markdown-pages-template-js","path":"/markdown-pages/programing/language/python/modules/paver/pavement.md","result":{"data":{"markdownRemark":{"html":"<h1>このファイルは？</h1>\n<p>タスクを読み込むエントリポイントのようなもの。\nファイル名、位置はルートディレクトリに置く。</p>\n<p>※マルチバイトのコメントを打つと怒りだします 　なぜだ...</p>\n<h1>一例</h1>\n<pre><code class=\"language-{.python}\">\"\"\"\nSphinxドキュメントを生成するタスク\n通常、Paverのdoctoolsを使うのだが、このプロジェクトの構造に合わせたいので作成\n\"\"\"\n\nimport shutil, sphinx.cmd.build, sphinx.ext.apidoc\nfrom paver.easy import dry, task, needs\nfrom pathlib import Path\n\n_sphinx_path = 'sphinx'\n_doctree_path = 'sphinx/__doctree__'\n_api_reSt_path = Path('sphinx', 'docs', '_modules')\n_module_path = Path('src')\n_docs_path = 'docs'\n\ndef create_apidoc(option):\n    \"\"\"\n    APIドキュメントの作成\n\n        :param list[str] option: sphinx-apidocオプション\n\n    \"\"\"\n    sphinx.ext.apidoc.main(option)\n\n\n\ndef build(option):\n    \"\"\"\n    reStructuredTextからSphinxによるビルド\n\n        :param list[str] option: sphinx-buildオプション\n\n    \"\"\"\n    sphinx.cmd.build.main(option)\n\n\n\ndef clear(dir):\n    \"\"\"\n    ディレクトリごと削除\n        :param str dir:ディレクトリ\n    \"\"\"\n    if(Path(dir).exists()):\n        print('%s is delete...' % dir)\n        shutil.rmtree(dir)\n        print('%s is done delete!' % dir)\n\n\ndef get_dirlist(path):\n    list = [p for p in path.iterdir() if p.is_dir()]\n    for p in list:\n        list += get_dirlist(p)\n    return [p for p in list if p != None]\n\n\n@task\ndef cleanup_docs():\n    clear(_api_reSt_path)\n    clear(_doctree_path)\n    clear(_docs_path)\n\n\n@task\ndef create_docs():\n    \"\"\"\n    ドキュメント生成\n\n        :param list[str] option: sphinx-buildオプション\n\n    \"\"\"\n    for p in get_dirlist(_module_path):\n        if(p.name == '__pycache__'): continue\n        relative = p.relative_to(_module_path)\n        input_path = str(p)\n        out_path = str(_api_reSt_path.joinpath(relative))\n        # print(input_path)\n        # print(out_path)\n        create_apidoc(['-f', '--follow-links', '-o', out_path, input_path])\n\n    build(['-b', 'html', '-d', _doctree_path, _sphinx_path, _docs_path])\n\n@task\ndef recreate_docs():\n    cleanup_docs()\n    create_docs()\n</code></pre>\n<pre><code class=\"language-{.python}\">\"\"\"\nPaver Setup\n\"\"\"\nimport os, sys\nfrom paver.easy import options\nfrom paver.setuputils import setup\n\nsys.path.insert(0, os.path.abspath('.'))\nsys.path.insert(0, os.path.abspath('../task'))\n\noptions(\n    setup=dict(\n        name='study-with-python',\n        packages=[],\n        version='0.0.0',\n        url='https://github.com/murnana/study-with-python/',\n        install_requires=['paver','pipenv']\n    )\n)\n\nfrom task import create_doc\n</code></pre>\n<h1>タスクの基本</h1>\n<p>定義するには <code>@task</code> を使用します</p>\n<pre><code class=\"language-{.python}\">from paver.easy import task\n\n@task\ndef sample_task():\n    print('さんぷる')\n</code></pre>\n<p>この場合は、 <code>sample_task</code> という名前のタスクになります</p>\n<h1>依存タスク</h1>\n<p>自分より前に実行されなければならないタスクがある場合は <code>@needs</code>\nを使います</p>\n<pre><code class=\"language-{.python}\">from paver.easy import task, needs\n\n@task\n@needs(['sample_prev_task'])\ndef sample_task():\n    print('さんぷる')\n</code></pre>\n<h1>実行方法</h1>\n<p>コマンドラインもしくはターミナルに</p>\n<pre><code class=\"language-{.bat}\">paver sample_prev_task\n</code></pre>\n<p>と書くだけ</p>\n<h1>参考</h1>\n<ul>\n<li><a href=\"https://paver.github.io/paver-docs-jp/pavement.html\">徹底的に pavement.py --- Paver v1.0.1\ndocumentation</a></li>\n</ul>","frontmatter":{"title":"Pavement.pyの中身"}}},"pageContext":{"relativePath":"markdown-pages/programing/language/python/modules/paver/pavement.md"}}}